o Make the pretty-printer used by the "look" command obey an
   indentation level, so that containers can be listed with proper
   indentation.
o When attacking a table, the program fails. Fix that (but first fail
   a test)
o Put syntax code in a few very specific places, tie it to the
   commands.  Don't embed syntax descriptions in code (or at least
   don't do it very much).
o Make it possible to drop/put something on/into something (table,  well).
o Make drop actions able to trigger state changes (perhaps we should
   generalize that to let movement trigger state changes)

o Make a fun twenty-room game

o Look at some state of the art Common Lisp projects (perhaps https://github.com/fons/cl-mongo/blob/master/cl-mongo.asd)
   And see how they are structured.   Learn an copy best practices.
o Look into the whole MCL thing.  Perhaps it is useful? So far I can't even make it compile :-(
o Look into terminal graphics.
o Look in to letting a  javascript client talking directly to the lisp server.
o Look into networking, e.g. http://xach.com/lisp/quicknet.lisp, http://cl-cookbook.sourceforge.net/sockets.html
o Make it possible to run multiple clients each being served by a communications thread (http://www.clisp.org/impnotes/mt.html) which
   in turn talks to a single-threaded game mechanics thread.   Or something.

I'm still experimenting with the quicklisp[2] / asdf[1] combo.   Some
preliminary findings are:

o To see packages that are relevant to something, use this:

   (ql:system-apropos "vecto")

o Manual loading through quicklisp

   (ql:quickload "vecto")

o It should be possible to do this

    (asdf:load-system :foo)
   
   or even this
    
    (require :foo)

   but obviously quicklisp isn't as integrated into
   the package system as the documentation [1] claims.
   In fact, not even this seems to work 
   automagically:


    (asdf:load-system :foo)
   


[1] http://www.quicklisp.org/beta/

[2] http://common-lisp.net/project/asdf/asdf.pdf
